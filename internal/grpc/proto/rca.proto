syntax = "proto3";

package rca.v1;

option go_package = "github.com/miradorstack/mirador-rca/internal/grpc/generated/rca/v1;rcav1";

import "google/protobuf/timestamp.proto";

message RCAInvestigationRequest {
  string incident_id = 1;
  repeated string symptoms = 2;
  TimeRange time_range = 3;
  repeated string affected_services = 4;
  double anomaly_threshold = 5;
  string tenant_id = 6;
}

message TimeRange {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end = 2;
}

message CorrelationResult {
  string correlation_id = 1;
  string incident_id = 2;
  string root_cause = 3;
  double confidence = 4;
  repeated string affected_services = 5;
  repeated RedAnchor red_anchors = 6;
  repeated TimelineEvent timeline = 7;
  repeated string recommendations = 8;
  google.protobuf.Timestamp created_at = 9;
}

message RedAnchor {
  string service = 1;
  string selector = 2;
  DataType data_type = 3;
  google.protobuf.Timestamp timestamp = 4;
  double anomaly_score = 5;
  double threshold = 6;
}

enum DataType {
  DATA_TYPE_UNSPECIFIED = 0;
  DATA_TYPE_METRICS = 1;
  DATA_TYPE_LOGS = 2;
  DATA_TYPE_TRACES = 3;
}

message TimelineEvent {
  google.protobuf.Timestamp time = 1;
  string event = 2;
  string service = 3;
  Severity severity = 4;
  double anomaly_score = 5;
  DataType data_source = 6;
}

enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_LOW = 1;
  SEVERITY_MEDIUM = 2;
  SEVERITY_HIGH = 3;
  SEVERITY_CRITICAL = 4;
}

message ListCorrelationsRequest {
  string tenant_id = 1;
  string service = 2;
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time = 4;
  int32 page_size = 5;
  string page_token = 6;
}

message ListCorrelationsResponse {
  repeated CorrelationResult correlations = 1;
  string next_page_token = 2;
}

message GetPatternsRequest {
  string tenant_id = 1;
  string service = 2;
}

message Pattern {
  string id = 1;
  string name = 2;
  string description = 3;
  repeated string services = 4;
  repeated AnchorTemplate anchor_templates = 5;
  double prevalence = 6;
  google.protobuf.Timestamp last_seen = 7;
  Quality quality = 8;
}

message AnchorTemplate {
  string service = 1;
  string signal_type = 2;
  string selector = 3;
  double typical_lead_lag = 4;
  double threshold = 5;
}

message Quality {
  double precision = 1;
  double recall = 2;
}

message GetPatternsResponse {
  repeated Pattern patterns = 1;
}

message FeedbackRequest {
  string tenant_id = 1;
  string correlation_id = 2;
  bool correct = 3;
  string notes = 4;
}

message FeedbackAck {
  string correlation_id = 1;
  bool accepted = 2;
}

message HealthRequest {}

message HealthResponse {
  string status = 1;
}

service RCAEngine {
  rpc InvestigateIncident(RCAInvestigationRequest) returns (CorrelationResult);
  rpc ListCorrelations(ListCorrelationsRequest) returns (ListCorrelationsResponse);
  rpc GetPatterns(GetPatternsRequest) returns (GetPatternsResponse);
  rpc SubmitFeedback(FeedbackRequest) returns (FeedbackAck);
  rpc HealthCheck(HealthRequest) returns (HealthResponse);
}
